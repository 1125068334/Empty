/**
    18-1: 视图
        视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询

        18-1-1: 为什么使用视图
            1. 重用SQL语句
            2. 简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节
            3. 使用表地一部分而不是整个表
            4. 保护数据。 可以授予用户访问表地特定部分地权限，而不是整个表地访问权限
            5. 更改数据格式和表示。视图可返回与底层表地表示和格式不同地数据。
        18-1-2: 视图地规则和限制
            关于视图创建和使用地一些最常见地规则和限制
            1. 与表一样，视图必须唯一命名(不能给视图取与别的视图或表相同的名字)
            2. 对于可以创建的视图数目没有限制
            3. 创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予
            4. 试图可以嵌套，即可以利用从其他视图中检索数据的查询来构造视图。所允许的嵌套层数在不同的DBMS中有所不同(嵌套视图可能会严重
                降低查询的性能，因此在产品环境使用之前，应该对其进行全面测试)
            5. 许多DBMS禁止在视图查询中使用ORDER BY子句
            6. 有些DBMS要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名
            7. 视图不能索引，也不能有关联的触发器或默认值
            8. 有些DBMS把视图作为只读的查询，这表示可以从视图检索数据，但不能将数据写回底层表。
            9. 有些DBMS允许创建这样这样的视图，它不能进行导致行不再属于视图的插入或更新。
            10. 视图中不能使用order by---多此一举
 */
select cust_name, cust_contact
from customers,
     orders,
     orderitems
where customers.cust_id = orders.cust_id
  and orderitems.order_num = orders.order_num
  and prod_id = 'RGAN01';

